// optimal here the tc is o(n) and sc is o(1) // here we have to first find the collision point(s and f) and next the starting point(entry and s)
ListNode *detectCycle(ListNode *head) {
        if(head==NULL || head->next==NULL)
          return NULL;

          ListNode* slow= head;
          ListNode* fast= head;
          ListNode* entry= head;

          while(fast->next && fast->next->next){
              slow= slow->next;
              fast= fast->next->next;
              if(slow==fast){           // there is a cycle
                  while(slow!=entry){   // found the entry location
                      slow=slow->next;
                      entry=entry->next;
                  }
                  return entry;
              }
          }
          return NULL;
    }
};
// brute force
here hashing is used and tc is o(n) and sc is o(n)

// intutition behind this algorithm is 
s-> L1+L2
f-> 2(L1+L2)= n(c)+L1+L2  THEREFORE L1=n(c)-L2
